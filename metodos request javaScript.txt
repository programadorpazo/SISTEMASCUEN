
function RequestServer(methodUrl, url, callBackServer, text) {
    var xhr = new XMLHttpRequest();
    xhr.open(methodUrl, url);
    xhr.onreadystatechange = function () {
        if (xhr.status == 200 && xhr.readyState == 4) {
            callBackServer(xhr.response);
        }
    }
    if (methodUrl == "get") {
        xhr.send();
    } else {
        if (text != "" && text != null) {
            xhr.send(text);
        }
    }
}

=================================================================================


function sendRequest(url, params, callback, method) {
    httpRequest = getXMLHttpRequest();
    var httpMethod = method ? method : 'GET';
    if (httpMethod !== 'GET' && httpMethod !== 'POST') {
        httpMethod = 'GET';
    }
    var httpParams = (params === null || params === '') ? null : params;
    var httpUrl = url;
    if (httpMethod === 'GET' && httpParams !== null) {
        httpUrl = httpUrl + "?" + httpParams;
    }
    httpRequest.open(httpMethod, httpUrl, true);
    httpRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    httpRequest.onreadystatechange = callback;
    httpRequest.send(httpMethod === 'POST' ? httpParams : null);
}


function Get(url, params, callback) {
    //var params = null;
    //var params = "id=" + encodeURIComponent("");
    sendRequest(url + ".aspx", params, callback, "GET");
}
function Send(url, params, callback) {
    //var params = null;
    //var params = "id=" + encodeURIComponent("");
    sendRequest(url + ".aspx", params, callback, "POST");
}


function ReplaceAll(str, find, replace) {
    return str.replace(new RegExp(find, 'g'), replace);
}

function getParameterByName(name) {
    name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
        results = regex.exec(location.search);
    return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
}